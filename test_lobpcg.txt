int n = 3; // number of rows
int m = 2; // number of columns
Eigen::MatrixXd evec(n, m); // initialize evec with zeros

check_init_guess(n, m, evec);

// Check if evec is filled with random values in U[0,1)
for (int i = 0; i < n; ++i) {
    for (int j = 0; j < m; ++j) {
        assert(evec(i, j) >= 0.0 && evec(i, j) < 1.0);
    }
}

// Check if evec is orthogonal
Eigen::MatrixXd overlap = evec.transpose() * evec;
double diag_norm = overlap.diagonal().array().square().sum();
double out_norm = (overlap.array().square()).sum() - diag_norm;
assert(std::abs(diag_norm - m) <= 1e-10);
assert(std::abs(out_norm) <= 1e-10);

x
-0.846852 -0.492958
 0.107965 -0.526819
-0.520755  0.692427

x = np.array([[-0.846852, -0.492958],
[ 0.107965, -0.526819],
[-0.520755, 0.692427]])


y
-0.453376  0.205905
 0.599143 -0.649943
-0.659907 -0.731559
y = np.array([[-0.453376, 0.205905],
[ 0.599143,-0.649943],
[-0.659907, -0.731559]])


import scipy_lobpcg



In [5]: import numpy as np

In [6]: x = np.array([[-0.846852, -0.492958],
   ...: [ 0.107965, -0.526819],
   ...: [-0.520755, 0.692427]])



In [9]: y = np.array([[-0.453376, 0.205905],
   ...: [ 0.599143,-0.649943],
   ...: [-0.659907, -0.731559]])


In [15]: x.transpose() @ x
Out[15]: 
array([[ 1.00000052e+00, -3.67504000e-07],
       [-3.67504000e-07,  1.00000100e+00]])

In [16]: y.transpose() @ y
Out[16]: 
array([[ 9.99999380e-01, -2.79116000e-07],
       [-2.79116000e-07,  1.00000134e+00]])


In [18]: yby = y.T @ y


In [20]: gramyby=scipy_lobpcg.cho_factor(yby, overwrite_a=True)

In [21]: gramyby
Out[21]: 
(array([[ 9.99999690e-01, -2.79116087e-07],
        [-2.79116000e-07,  1.00000067e+00]]),
 False)

In [23]: by=y

In [24]: scipy_lobpcg._applyConstraints(x,gramyby,by,y)

In [25]: y
Out[25]: 
array([[-0.453376,  0.205905],
       [ 0.599143, -0.649943],
       [-0.659907, -0.731559]])

In [26]: x
Out[26]: 
array([[-0.51574135, -0.68719989],
       [-0.27805776, -0.37049824],
       [ 0.10187555,  0.13574414]])

In [27]: x.T@x
Out[27]: 
array([[0.35368388, 0.47126632],
       [0.47126632, 0.6279391 ]])

In [28]: y.T@y
Out[28]: 
array([[ 9.99999380e-01, -2.79116000e-07],
       [-2.79116000e-07,  1.00000134e+00]])

In [29]: x.T@y
Out[29]: 
array([[-1.35398824e-16,  1.42279789e-17],
       [ 2.42485518e-16, -6.52106116e-17]])